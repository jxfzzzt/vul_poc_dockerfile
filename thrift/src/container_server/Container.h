/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Container_H
#define Container_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "server_types.h"

namespace container_service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ContainerIf {
 public:
  virtual ~ContainerIf() {}
  virtual int32_t open_container(const Req& req, const std::string& info) = 0;
  virtual int32_t close_container(const Req& req, const std::string& info) = 0;
};

class ContainerIfFactory {
 public:
  typedef ContainerIf Handler;

  virtual ~ContainerIfFactory() {}

  virtual ContainerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ContainerIf* /* handler */) = 0;
};

class ContainerIfSingletonFactory : virtual public ContainerIfFactory {
 public:
  ContainerIfSingletonFactory(const boost::shared_ptr<ContainerIf>& iface) : iface_(iface) {}
  virtual ~ContainerIfSingletonFactory() {}

  virtual ContainerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ContainerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ContainerIf> iface_;
};

class ContainerNull : virtual public ContainerIf {
 public:
  virtual ~ContainerNull() {}
  int32_t open_container(const Req& /* req */, const std::string& /* info */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t close_container(const Req& /* req */, const std::string& /* info */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Container_open_container_args__isset {
  _Container_open_container_args__isset() : req(false), info(false) {}
  bool req :1;
  bool info :1;
} _Container_open_container_args__isset;

class Container_open_container_args {
 public:

  Container_open_container_args(const Container_open_container_args&);
  Container_open_container_args& operator=(const Container_open_container_args&);
  Container_open_container_args() : info() {
  }

  virtual ~Container_open_container_args() throw();
  Req req;
  std::string info;

  _Container_open_container_args__isset __isset;

  void __set_req(const Req& val);

  void __set_info(const std::string& val);

  bool operator == (const Container_open_container_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const Container_open_container_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Container_open_container_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Container_open_container_pargs {
 public:


  virtual ~Container_open_container_pargs() throw();
  const Req* req;
  const std::string* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Container_open_container_result__isset {
  _Container_open_container_result__isset() : success(false) {}
  bool success :1;
} _Container_open_container_result__isset;

class Container_open_container_result {
 public:

  Container_open_container_result(const Container_open_container_result&);
  Container_open_container_result& operator=(const Container_open_container_result&);
  Container_open_container_result() : success(0) {
  }

  virtual ~Container_open_container_result() throw();
  int32_t success;

  _Container_open_container_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Container_open_container_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Container_open_container_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Container_open_container_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Container_open_container_presult__isset {
  _Container_open_container_presult__isset() : success(false) {}
  bool success :1;
} _Container_open_container_presult__isset;

class Container_open_container_presult {
 public:


  virtual ~Container_open_container_presult() throw();
  int32_t* success;

  _Container_open_container_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Container_close_container_args__isset {
  _Container_close_container_args__isset() : req(false), info(false) {}
  bool req :1;
  bool info :1;
} _Container_close_container_args__isset;

class Container_close_container_args {
 public:

  Container_close_container_args(const Container_close_container_args&);
  Container_close_container_args& operator=(const Container_close_container_args&);
  Container_close_container_args() : info() {
  }

  virtual ~Container_close_container_args() throw();
  Req req;
  std::string info;

  _Container_close_container_args__isset __isset;

  void __set_req(const Req& val);

  void __set_info(const std::string& val);

  bool operator == (const Container_close_container_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const Container_close_container_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Container_close_container_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Container_close_container_pargs {
 public:


  virtual ~Container_close_container_pargs() throw();
  const Req* req;
  const std::string* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Container_close_container_result__isset {
  _Container_close_container_result__isset() : success(false) {}
  bool success :1;
} _Container_close_container_result__isset;

class Container_close_container_result {
 public:

  Container_close_container_result(const Container_close_container_result&);
  Container_close_container_result& operator=(const Container_close_container_result&);
  Container_close_container_result() : success(0) {
  }

  virtual ~Container_close_container_result() throw();
  int32_t success;

  _Container_close_container_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Container_close_container_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Container_close_container_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Container_close_container_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Container_close_container_presult__isset {
  _Container_close_container_presult__isset() : success(false) {}
  bool success :1;
} _Container_close_container_presult__isset;

class Container_close_container_presult {
 public:


  virtual ~Container_close_container_presult() throw();
  int32_t* success;

  _Container_close_container_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ContainerClient : virtual public ContainerIf {
 public:
  ContainerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ContainerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t open_container(const Req& req, const std::string& info);
  void send_open_container(const Req& req, const std::string& info);
  int32_t recv_open_container();
  int32_t close_container(const Req& req, const std::string& info);
  void send_close_container(const Req& req, const std::string& info);
  int32_t recv_close_container();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ContainerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ContainerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ContainerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_open_container(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_close_container(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ContainerProcessor(boost::shared_ptr<ContainerIf> iface) :
    iface_(iface) {
    processMap_["open_container"] = &ContainerProcessor::process_open_container;
    processMap_["close_container"] = &ContainerProcessor::process_close_container;
  }

  virtual ~ContainerProcessor() {}
};

class ContainerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ContainerProcessorFactory(const ::boost::shared_ptr< ContainerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ContainerIfFactory > handlerFactory_;
};

class ContainerMultiface : virtual public ContainerIf {
 public:
  ContainerMultiface(std::vector<boost::shared_ptr<ContainerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ContainerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ContainerIf> > ifaces_;
  ContainerMultiface() {}
  void add(boost::shared_ptr<ContainerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t open_container(const Req& req, const std::string& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->open_container(req, info);
    }
    return ifaces_[i]->open_container(req, info);
  }

  int32_t close_container(const Req& req, const std::string& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->close_container(req, info);
    }
    return ifaces_[i]->close_container(req, info);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ContainerConcurrentClient : virtual public ContainerIf {
 public:
  ContainerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ContainerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t open_container(const Req& req, const std::string& info);
  int32_t send_open_container(const Req& req, const std::string& info);
  int32_t recv_open_container(const int32_t seqid);
  int32_t close_container(const Req& req, const std::string& info);
  int32_t send_close_container(const Req& req, const std::string& info);
  int32_t recv_close_container(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
