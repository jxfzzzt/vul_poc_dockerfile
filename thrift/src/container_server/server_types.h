/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef server_TYPES_H
#define server_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace container_service {

class Req;

typedef struct _Req__isset {
  _Req__isset() : uid(false), cveName(false) {}
  bool uid :1;
  bool cveName :1;
} _Req__isset;

class Req {
 public:

  Req(const Req&);
  Req& operator=(const Req&);
  Req() : uid(0), cveName() {
  }

  virtual ~Req() throw();
  int64_t uid;
  std::string cveName;

  _Req__isset __isset;

  void __set_uid(const int64_t val);

  void __set_cveName(const std::string& val);

  bool operator == (const Req & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(cveName == rhs.cveName))
      return false;
    return true;
  }
  bool operator != (const Req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Req &a, Req &b);

inline std::ostream& operator<<(std::ostream& out, const Req& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
